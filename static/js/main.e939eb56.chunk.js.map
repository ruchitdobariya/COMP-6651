{"version":3,"sources":["graph.js","utils.js","cbip.js","first_fit.js","generator.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","constructor","this","num_vertex","num_edge","chromatic_number","adj","Map","coloring","print","console","log","u","neighbors","entries","concat","get","join","getVisGraph","itocol","1","2","3","4","5","6","7","8","9","10","getColor","index","Math","floor","random","toString","padStart","CBIPSolver","g","visGraph","nodes","edges","noOfEdges","visGraphHistory","noOfEdgesHistory","maxColor","get_partition","start_bfs","visited","partition","Set","q","lvl","set","length","size","i","shift","add","v","push","solve","vertex","neighbours","color","p","has","neighbour_colors","max","id","label","background","border","hover","highlight","from","to","debug","pop","x","pushBack","FirstFitSolver","getRandomInt","add_edge","generator","n","k","type","arguments","undefined","groups","includes","solver","alreadyAdded","edgesToAdd","tc","Option","Select","App","graph","setGraph","useState","JSON","parse","stringify","setN","setK","algo","setAlgo","cr","setCr","physics","setPhysics","setP","React","createElement","className","key","options","width","arrows","enabled","middle","borderWidth","borderWidthSelected","font","interaction","navigationButtons","zoomView","dragView","barnesHut","gravitationalConstant","centralGravity","springLength","height","getNetwork","network","Button","style","backgroundColor","margin","disabled","onClick","onPreviousClick","onNextClick","Switch","checkedChildren","unCheckedChildren","defaultChecked","onChange","e","Form","onFinish","layout","Item","name","rules","required","message","InputNumber","min","defaultValue","placeholder","value","step","alert","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","HashRouter","Routes","Route","path","element"],"mappings":"kUAsBeA,MAtBf,MACEC,cACEC,KAAKC,WAAa,EAClBD,KAAKE,SAAW,EAChBF,KAAKG,iBAAmB,EACxBH,KAAKI,IAAM,IAAIC,IACfL,KAAKM,SAAW,IAAID,IAGtBE,QACEC,QAAQC,IAAI,sCACZ,IAAK,MAAOC,EAAGC,KAAcX,KAAKI,IAAIQ,UACpCJ,QAAQC,IAAI,GAADI,OACNH,EAAC,MAAAG,OAAKb,KAAKM,SAASQ,IAAIJ,GAAE,UAAAG,OAASF,EAAUI,KAAK,MAAK,MAG9DP,QAAQC,IAAI,sCAGdO,iBCnBF,IAAIC,EAAS,CACTC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,EAAE,UACFC,GAAG,WAOA,MAAMC,EAAYC,IACjBZ,EAAOY,KACPZ,EAAOY,GALJ,IADWC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IACzCC,SAAS,EAAG,MAO5BjB,EAAOY,ICwFHM,MA1Gf,MACEpC,cACEC,KAAKoC,EAAI,IAAItC,EACbE,KAAKqC,SAAW,CAAEC,MAAO,GAAIC,MAAO,IACpCvC,KAAKwC,UAAY,GAEjBxC,KAAKyC,gBAAkB,CAAEH,MAAO,GAAIC,MAAO,IAC3CvC,KAAK0C,iBAAmB,GACxB1C,KAAK2C,SAAW,EAGlBC,cAAcC,GAEZ,MAAMC,EAAU,IAAIzC,IACd0C,EAAY,CAAC,IAAIC,IAAO,IAAIA,KAC5BC,EAAI,CAACJ,GACX,IAAIK,EAAM,EAEV,IADAJ,EAAQK,IAAIN,GAAW,GAChBI,EAAEG,OAAS,GAAG,CACnB,MAAMC,EAAOJ,EAAEG,OACf,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAMC,IAAK,CAC7B,MAAM5C,EAAIuC,EAAEM,QACZR,EAAUG,GAAKM,IAAI9C,GACnB,IAAK,MAAM+C,KAAKzD,KAAKoC,EAAEhC,IAAIU,IAAIJ,GACxBoC,EAAQhC,IAAI2C,KACfX,EAAQK,IAAIM,GAAG,GACfR,EAAES,KAAKD,IAIbP,GAAO,EAET,OAAOH,EAGTY,MAAMC,EAAQC,GACZ7D,KAAKoC,EAAEnC,aACPD,KAAKoC,EAAEhC,IAAI+C,IAAIS,EAAQ,IACvB,IAAK,MAAMH,KAAKI,EACd7D,KAAKoC,EAAEhC,IAAIU,IAAI2C,GAAGC,KAAKE,GACvB5D,KAAKoC,EAAEhC,IAAIU,IAAI8C,GAAQF,KAAKD,GAC5BzD,KAAKoC,EAAElC,WAET,MAAM6C,EAAY/C,KAAK4C,cAAcgB,GACrC,IAAIE,EAAQ,EACZ,IAAK,MAAMC,KAAKhB,EAAW,CACzB,GAAIgB,EAAEC,IAAIJ,GACR,SAEF,MAAMK,EAAmB,IAAIjB,IAC7B,IAAK,MAAMS,KAAKM,EACdE,EAAiBT,IAAIxD,KAAKoC,EAAE9B,SAASQ,IAAI2C,IAE3C,KAAOQ,EAAiBD,IAAIF,IAC1BA,IAGJ9D,KAAKoC,EAAE9B,SAAS6C,IAAIS,EAAQE,GAC5B9D,KAAK2C,SAAWb,KAAKoC,IAAIJ,EAAO9D,KAAK2C,UAErC3C,KAAKqC,SAASC,MAAMoB,KAAK,CACvBS,GAAIP,EACJQ,MAAM,GAADvD,OAAK+C,GACVE,MAAO,CACLO,WAAYzC,EAASkC,GACrBQ,OAAQ,QACRC,MAAO,CAAEF,WAAYzC,EAASkC,GAAQQ,OAAQ,SAC9CE,UAAW,CAAEH,WAAYzC,EAASkC,GAAQQ,OAAQ,YAItD,IAAK,MAAMb,KAAKI,EACd7D,KAAKqC,SAASE,MAAMmB,KAAK,CAAEe,KAAMb,EAAQc,GAAIjB,IAM/C,OAHAzD,KAAKwC,UAAUkB,KAAKG,EAAWT,QAE/B5C,QAAQmE,MAAMf,EAAQE,GACf9D,KAAKoC,EAGdwC,MACE5E,KAAKyC,gBAAgBH,MAAMoB,KAAK1D,KAAKqC,SAASC,MAAMsC,OACpD,IAAIC,EAAI7E,KAAKwC,UAAUoC,MACvB5E,KAAK0C,iBAAiBgB,KAAKmB,GAE3B,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAGvB,IACrBtD,KAAKyC,gBAAgBF,MAAMmB,KAAK1D,KAAKqC,SAASE,MAAMqC,OAEtD,OAAO5E,KAAKqC,SAGdyC,WACE9E,KAAKqC,SAASC,MAAMoB,KAAK1D,KAAKyC,gBAAgBH,MAAMsC,OACpD,IAAIC,EAAI7E,KAAK0C,iBAAiBkC,MAC9B5E,KAAKwC,UAAUkB,KAAKmB,GAEpB,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAGvB,IACrBtD,KAAKqC,SAASE,MAAMmB,KAAK1D,KAAKyC,gBAAgBF,MAAMqC,OAEtD,OAAO5E,KAAKqC,SAEdrB,cACE,OAAOhB,KAAKqC,WC3BD0C,MA5Ef,MACEhF,cACEC,KAAKoC,EAAI,IAAItC,EACbE,KAAKqC,SAAW,CAAEC,MAAO,GAAIC,MAAO,IACpCvC,KAAKwC,UAAY,GAEjBxC,KAAKyC,gBAAkB,CAAEH,MAAO,GAAIC,MAAO,IAC3CvC,KAAK0C,iBAAmB,GACxB1C,KAAK2C,SAAW,EAGlBgB,MAAMC,EAAQC,GACZ,MAAMI,EAAmB,IAAIjB,IAC7BhD,KAAKoC,EAAEnC,aACPD,KAAKoC,EAAEhC,IAAI+C,IAAIS,EAAQ,IACvB,IAAK,MAAMH,KAAKI,EACdI,EAAiBT,IAAIxD,KAAKoC,EAAE9B,SAASQ,IAAI2C,IACzCzD,KAAKoC,EAAEhC,IAAIU,IAAI2C,GAAGC,KAAKE,GACvB5D,KAAKoC,EAAEhC,IAAIU,IAAI8C,GAAQF,KAAKD,GAC5BzD,KAAKoC,EAAElC,WAET,IAAI4D,EAAQ,EACZ,KAAOG,EAAiBD,IAAIF,IAC1BA,IAGF9D,KAAKoC,EAAE9B,SAAS6C,IAAIS,EAAQE,GAC5B9D,KAAK2C,SAAWb,KAAKoC,IAAIJ,EAAO9D,KAAK2C,UAErC3C,KAAKqC,SAASC,MAAMoB,KAAK,CACvBS,GAAIP,EACJQ,MAAM,GAADvD,OAAK+C,GACVE,MAAO,CACLO,WAAYzC,EAASkC,GACrBQ,OAAQ,QACRC,MAAO,CAAEF,WAAYzC,EAASkC,GAAQQ,OAAQ,SAC9CE,UAAW,CAAEH,WAAYzC,EAASkC,GAAQQ,OAAQ,YAItD,IAAK,MAAMb,KAAKI,EACd7D,KAAKqC,SAASE,MAAMmB,KAAK,CAAEe,KAAMb,EAAQc,GAAIjB,IAM/C,OAHAzD,KAAKwC,UAAUkB,KAAKG,EAAWT,QAE/B5C,QAAQmE,MAAMf,EAAQE,GACf9D,KAAKoC,EAGdwC,MACE5E,KAAKyC,gBAAgBH,MAAMoB,KAAK1D,KAAKqC,SAASC,MAAMsC,OACpD,IAAIC,EAAI7E,KAAKwC,UAAUoC,MACvB5E,KAAK0C,iBAAiBgB,KAAKmB,GAE3B,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAGvB,IACrBtD,KAAKyC,gBAAgBF,MAAMmB,KAAK1D,KAAKqC,SAASE,MAAMqC,OAEtD,OAAO5E,KAAKqC,SAGdyC,WACE9E,KAAKqC,SAASC,MAAMoB,KAAK1D,KAAKyC,gBAAgBH,MAAMsC,OACpD,IAAIC,EAAI7E,KAAK0C,iBAAiBkC,MAC9B5E,KAAKwC,UAAUkB,KAAKmB,GAEpB,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAGvB,IACrBtD,KAAKqC,SAASE,MAAMmB,KAAK1D,KAAKyC,gBAAgBF,MAAMqC,OAEtD,OAAO5E,KAAKqC,SAEdrB,cACE,OAAOhB,KAAKqC,WCvEhB,SAAS2C,EAAad,GACpB,OAAOpC,KAAKC,MAAMD,KAAKE,SAAWkC,GAGpC,SAASe,EAAS1C,EAAO7B,EAAG+C,GAC1B,GAAI/C,GAAK+C,EAAT,CACA,IAAK,IAAIH,EAAI,EAAGA,EAAIf,EAAMa,OAAQE,IAChC,GACGf,EAAMe,GAAG,KAAO5C,GAAK6B,EAAMe,GAAG,KAAOG,GACrClB,EAAMe,GAAG,KAAOG,GAAKlB,EAAMe,GAAG,KAAO5C,EAEtC,OAEA+C,EAAI/C,EAAG6B,EAAMmB,KAAK,CAACD,EAAG/C,IACrB6B,EAAMmB,KAAK,CAAChD,EAAG+C,KAqDPyB,MAlDf,SAAmBC,EAAGC,EAAGrB,GAAmB,IAAhBsB,EAAIC,UAAAlC,OAAA,QAAAmC,IAAAD,UAAA,GAAAA,UAAA,GAAG,OAC7BE,EAAS,GACTjD,EAAQ,GACZ,IAAK,IAAIe,EAAI,EAAGA,EAAI8B,EAAG9B,IACrBkC,EAAO9B,KAAK,IAEd,IAAK,IAAIE,EAAS,EAAGA,GAAUwB,EAAGxB,IAChC4B,EAAO5B,EAAS,GAAGF,KAAKE,GAE1B,IAAK,IAAIA,EAASwB,EAAI,EAAGxB,GAAUuB,EAAGvB,IACpC4B,EAAOR,EAAaI,IAAI1B,KAAKE,GAE/B,IAAK,IAAIN,EAAI,EAAGA,EAAIkC,EAAOpC,OAAQE,IACjC,IAAK,IAAI5C,KAAK8E,EAAOlC,GAAI,CACvB,IAAK,IAAI8B,EAAI,EAAGA,EAAII,EAAOpC,OAAQgC,IAAK,CACtC,GAAII,EAAOJ,GAAGK,SAAS/E,GAAI,SAE3BuE,EAAS1C,EAAO7B,EADR8E,EAAOJ,GAAGJ,EAAaQ,EAAOJ,GAAGhC,UAG3C,IAAK,IAAIgC,EAAI,EAAGA,EAAII,EAAOpC,OAAQgC,IACjC,IAAII,EAAOJ,GAAGK,SAAS/E,GACvB,IAAK,IAAI+C,KAAK+B,EAAOJ,GACftD,KAAKE,UAAY+B,GAAGkB,EAAS1C,EAAO7B,EAAG+C,GAKnDjD,QAAQC,IAAI+E,GACZhF,QAAQC,IAAI8B,GACZ/B,QAAQC,IAAI4E,GAEZ,IAAIjD,EAAI,IAAItC,EACR4F,EAAkB,SAATL,EAAkB,IAAIlD,EAAWC,GAAK,IAAI2C,EAAe3C,GAElEuD,EAAe,IAAI3C,IACvB,IAAK,IAAItC,EAAI,EAAGA,GAAKyE,EAAGzE,IAAK,CAC3B,IAAIkF,EAAa,GACjB,IAAK,IAAItC,EAAI,EAAGA,EAAIf,EAAMa,OAAQE,IAChC,GAAIf,EAAMe,GAAG,KAAO5C,GAAK6B,EAAMe,GAAG,KAAO5C,EAAG,CAC1C,IAAI+C,EAAIlB,EAAMe,GAAGf,EAAMe,GAAG,KAAO5C,EAAI,EAAI,GACrCiF,EAAa3B,IAAIP,IAAImC,EAAWlC,KAAKD,GAG7CkC,EAAanC,IAAI9C,GACjBF,QAAQC,IAAIC,EAAGkF,GACfF,EAAO/B,MAAMjD,EAAGkF,GAAYrF,QAE9B,OAAOmF,GC7DT,IAAIG,EAAKX,EAAU,EAAG,GACtB,MAAM,OAAEY,GAAWC,IAuMJC,MArMf,WACE,MAAOC,EAAOC,GAAYC,mBAASC,KAAKC,MAAMD,KAAKE,UAAUT,EAAGxD,aACzD8C,EAAGoB,GAAQJ,mBAAS,IACpBf,EAAGoB,GAAQL,mBAAS,IACpBM,EAAMC,GAAWP,mBAAS,SAC1BQ,EAAIC,GAAST,mBAAwB,EAAdN,EAAGlD,SAAkByC,IAC5CyB,EAASC,GAAcX,oBAAS,IAChCpC,EAAGgD,GAAQZ,mBAAS,IAc3B,OACEa,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBAAqBN,IAE3BK,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAACnH,IAAK,CACJqH,IAAKlB,EAAMzD,UACXyD,MAAOA,EACPmB,QAAS,CACP7E,MAAO,CACLuB,MAAO,UACPuD,MAAO,EACPC,OAAQ,CACN5C,GAAI,CAAE6C,SAAS,GACfC,OAAQ,CAAED,SAAS,GACnB9C,KAAM,CAAE8C,SAAS,KAIrBjF,MAAO,CACL8B,MAAO,aACPqD,YAAa,EACbC,oBAAqB,EACrBC,KAAM,CACJtE,KAAM,GACNS,MAAO,WAETA,MAAO,CACLQ,OAAQ,YAGZsD,YAAa,CACXrD,OAAO,EACPsD,mBAAmB,EACnBC,UAAU,EACVC,UAAU,GAEZlB,QAAS,CACPU,QAASV,EACTmB,UAAW,CACTC,uBAAwB,IACxBC,eAAgB,GAChBC,aAAc,MAIlBC,OAAQ,SAGVC,WAAaC,SAKjBtB,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAACsB,IAAM,CACLC,MAAO,CAAEC,gBAAiB,UAAW3E,MAAO,OAAQ4E,OAAQ,QAC5DC,SAAsC,GAA5B9C,EAAGxD,SAASC,MAAMc,OAC5BwF,QAnEgBC,KACtB3C,EAASE,KAAKC,MAAMD,KAAKE,UAAUT,EAAGjB,WAmEjC,YAGDoC,IAAAC,cAACsB,IAAM,CACLC,MAAO,CACLC,gBAAiB,UACjB3E,MAAO,OACP4E,OAAQ,QAEVC,UAAW9C,EAAGpD,gBAAgBH,MAAMc,OACpCwF,QA1EYE,KAClB5C,EAASE,KAAKC,MAAMD,KAAKE,UAAUT,EAAGf,gBA0EjC,QAEQ,UAETkC,IAAAC,cAAC8B,IAAM,CACLP,MAAO,CAAEE,OAAQ,QACjBM,gBAAgB,KAChBC,kBAAkB,MAClBC,gBAAc,EACdC,SAAWC,IACTtC,EAAWsC,OAIjBpC,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAACoC,IAAI,CAACC,SAlGKA,OAkGeC,OAAO,UAC/BvC,IAAAC,cAACoC,IAAKG,KAAI,CACRpF,MAAM,yBACNqF,KAAK,IACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qBAEnC5C,IAAAC,cAAC4C,IAAW,CACVC,IAAK,EACL5F,IAAK,IACL6F,aAAc,EACdZ,SAAWC,IACT7C,EAAK6C,OAIXpC,IAAAC,cAACoC,IAAKG,KAAI,CACRpF,MAAM,uBACNqF,KAAK,IACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qBAEnC5C,IAAAC,cAAC4C,IAAW,CACVC,IAAK,EACL5F,IAAK,GACL6F,aAAc,EACdZ,SAAWC,IACT5C,EAAK4C,OAIXpC,IAAAC,cAACoC,IAAKG,KAAI,CACRC,KAAK,YACLrF,MAAM,YACNsF,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAEnC5C,IAAAC,cAAClB,IAAM,CACLiE,YAAY,mBACZD,aAAa,OACbZ,SAAWC,IACT1C,EAAQ0C,KAGVpC,IAAAC,cAACnB,EAAM,CAACmE,MAAM,YAAW,aACzBjD,IAAAC,cAACnB,EAAM,CAACmE,MAAM,QAAO,UAGzBjD,IAAAC,cAACoC,IAAKG,KAAI,CACRpF,MAAM,iCACNqF,KAAK,IACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qBAEnC5C,IAAAC,cAAC4C,IAAW,CACVC,IAAK,IACL5F,IAAK,EACLgG,KAAM,IACNH,aAAc,GACdZ,SAAWC,IACTrC,EAAKqC,OAIXpC,IAAAC,cAACoC,IAAKG,KAAI,KACRxC,IAAAC,cAACsB,IAAM,CACLlD,KAAK,UACLuD,QAASA,KACM,SAATnC,GAAmBrB,EAAI,EACzB+E,MAAM,qCAGE,OAANhF,GAAoB,OAANC,EAIdA,EAAID,EACNgF,MAAM,iCAGRtE,EAAKX,EAAUC,EAAGC,EAAGrB,EAAG0C,GACxBP,EAASE,KAAKC,MAAMD,KAAKE,UAAUT,EAAGxD,YACtCuE,EAAqB,EAAdf,EAAGlD,SAAkByC,IAT1B+E,MAAM,2BAWX,iCCzLEC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,M,gBCADS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAOlE,IAAAC,cAACkE,IAAU,KACnBnE,IAAAC,cAACmE,IAAM,KACHpE,IAAAC,cAACoE,IAAK,CAACC,KAAK,IAAIC,QAASvE,IAAAC,cAACjB,EAAG,WAOrCoE,M","file":"static/js/main.e939eb56.chunk.js","sourcesContent":["class Graph {\n  constructor() {\n    this.num_vertex = 0;\n    this.num_edge = 0;\n    this.chromatic_number = 2;\n    this.adj = new Map();\n    this.coloring = new Map();\n  }\n\n  print() {\n    console.log(\"============= Graph ==============\");\n    for (const [u, neighbors] of this.adj.entries()) {\n      console.log(\n        `${u} (${this.coloring.get(u)}): -> ${neighbors.join(\", \")} `\n      );\n    }\n    console.log(\"==================================\");\n  }\n\n  getVisGraph() {}\n}\n\nexport default Graph;\n","let itocol = {\n    1:\"#FFA500\",\n    2:\"#97C30A\",\n    3:\"#1FBED6\",\n    4:\"#ffc0cb\",\n    5:\"#FFFF00\",\n    6:\"#00FF00\",\n    7:\"#808080\",\n    8:\"#FF0303\",\n    9:\"#9400D3\",\n    10:\"#008080\"\n}\nfunction getRandomColor() {\n    const randomHex = Math.floor(Math.random() * 16777215).toString(16);\n    return \"#\" + randomHex.padStart(6, \"0\");\n  }\n\nexport const getColor = (index) =>{\n    if(!itocol[index]){\n        itocol[index] = getRandomColor()\n    }\n    return itocol[index];\n}","import {  getColor } from \"./utils\";\nimport Graph from \"./graph\";\n\nclass CBIPSolver {\n  constructor() {\n    this.g = new Graph();\n    this.visGraph = { nodes: [], edges: [] };\n    this.noOfEdges = [];\n\n    this.visGraphHistory = { nodes: [], edges: [] };\n    this.noOfEdgesHistory = [];\n    this.maxColor = 0;\n  }\n\n  get_partition(start_bfs) {\n    // assert(this.g.chromatic_number == 2);\n    const visited = new Map();\n    const partition = [new Set(), new Set()];\n    const q = [start_bfs];\n    let lvl = 0;\n    visited.set(start_bfs, true);\n    while (q.length > 0) {\n      const size = q.length;\n      for (let i = 0; i < size; i++) {\n        const u = q.shift();\n        partition[lvl].add(u);\n        for (const v of this.g.adj.get(u)) {\n          if (!visited.get(v)) {\n            visited.set(v, true);\n            q.push(v);\n          }\n        }\n      }\n      lvl ^= 1;\n    }\n    return partition;\n  }\n\n  solve(vertex, neighbours) {\n    this.g.num_vertex++;\n    this.g.adj.set(vertex, []);\n    for (const v of neighbours) {\n      this.g.adj.get(v).push(vertex);\n      this.g.adj.get(vertex).push(v);\n      this.g.num_edge++;\n    }\n    const partition = this.get_partition(vertex);\n    let color = 1;\n    for (const p of partition) {\n      if (p.has(vertex)) {\n        continue;\n      }\n      const neighbour_colors = new Set();\n      for (const v of p) {\n        neighbour_colors.add(this.g.coloring.get(v));\n      }\n      while (neighbour_colors.has(color)) {\n        color++;\n      }\n    }\n    this.g.coloring.set(vertex, color);\n    this.maxColor = Math.max(color, this.maxColor);\n\n    this.visGraph.nodes.push({\n      id: vertex,\n      label: `${vertex}`,\n      color: {\n        background: getColor(color),\n        border: \"black\",\n        hover: { background: getColor(color), border: \"black\" },\n        highlight: { background: getColor(color), border: \"black\" },\n      },\n    });\n\n    for (const v of neighbours) {\n      this.visGraph.edges.push({ from: vertex, to: v });\n    }\n\n    this.noOfEdges.push(neighbours.length);\n\n    console.debug(vertex, color);\n    return this.g;\n  }\n\n  pop() {\n    this.visGraphHistory.nodes.push(this.visGraph.nodes.pop());\n    let x = this.noOfEdges.pop();\n    this.noOfEdgesHistory.push(x);\n\n    for (let i = 0; i < x; i++) {\n      this.visGraphHistory.edges.push(this.visGraph.edges.pop());\n    }\n    return this.visGraph;\n  }\n\n  pushBack() {\n    this.visGraph.nodes.push(this.visGraphHistory.nodes.pop());\n    let x = this.noOfEdgesHistory.pop();\n    this.noOfEdges.push(x);\n\n    for (let i = 0; i < x; i++) {\n      this.visGraph.edges.push(this.visGraphHistory.edges.pop());\n    }\n    return this.visGraph;\n  }\n  getVisGraph() {\n    return this.visGraph;\n  }\n}\nexport default CBIPSolver;\n","import { getColor } from \"./utils\";\nimport Graph from \"./graph\";\n\nclass FirstFitSolver {\n  constructor() {\n    this.g = new Graph();\n    this.visGraph = { nodes: [], edges: [] };\n    this.noOfEdges = [];\n\n    this.visGraphHistory = { nodes: [], edges: [] };\n    this.noOfEdgesHistory = [];\n    this.maxColor = 0;\n  }\n\n  solve(vertex, neighbours) {\n    const neighbour_colors = new Set();\n    this.g.num_vertex++;\n    this.g.adj.set(vertex, []);\n    for (const v of neighbours) {\n      neighbour_colors.add(this.g.coloring.get(v));\n      this.g.adj.get(v).push(vertex);\n      this.g.adj.get(vertex).push(v);\n      this.g.num_edge++;\n    }\n    let color = 1;\n    while (neighbour_colors.has(color)) {\n      color++;\n    }\n\n    this.g.coloring.set(vertex, color);\n    this.maxColor = Math.max(color, this.maxColor);\n\n    this.visGraph.nodes.push({\n      id: vertex,\n      label: `${vertex}`,\n      color: {\n        background: getColor(color),\n        border: \"black\",\n        hover: { background: getColor(color), border: \"black\" },\n        highlight: { background: getColor(color), border: \"black\" },\n      },\n    });\n\n    for (const v of neighbours) {\n      this.visGraph.edges.push({ from: vertex, to: v });\n    }\n\n    this.noOfEdges.push(neighbours.length);\n\n    console.debug(vertex, color);\n    return this.g;\n  }\n\n  pop() {\n    this.visGraphHistory.nodes.push(this.visGraph.nodes.pop());\n    let x = this.noOfEdges.pop();\n    this.noOfEdgesHistory.push(x);\n\n    for (let i = 0; i < x; i++) {\n      this.visGraphHistory.edges.push(this.visGraph.edges.pop());\n    }\n    return this.visGraph;\n  }\n\n  pushBack() {\n    this.visGraph.nodes.push(this.visGraphHistory.nodes.pop());\n    let x = this.noOfEdgesHistory.pop();\n    this.noOfEdges.push(x);\n\n    for (let i = 0; i < x; i++) {\n      this.visGraph.edges.push(this.visGraphHistory.edges.pop());\n    }\n    return this.visGraph;\n  }\n  getVisGraph() {\n    return this.visGraph;\n  }\n}\n\nexport default FirstFitSolver;\n","import Graph from \"./graph\";\nimport CBIPSolver from \"./cbip\";\nimport FirstFitSolver from \"./first_fit\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction add_edge(edges, u, v) {\n  if (u == v) return;\n  for (let i = 0; i < edges.length; i++) {\n    if (\n      (edges[i][0] === u && edges[i][1] === v) ||\n      (edges[i][0] === v && edges[i][1] === u)\n    )\n      return;\n  }\n  if (v < u) edges.push([v, u]);\n  else edges.push([u, v]);\n}\n\nfunction generator(n, k, p, type = \"cbip\") {\n  let groups = [];\n  let edges = [];\n  for (let i = 0; i < k; i++) {\n    groups.push([]);\n  }\n  for (let vertex = 1; vertex <= k; vertex++) {\n    groups[vertex - 1].push(vertex);\n  }\n  for (let vertex = k + 1; vertex <= n; vertex++) {\n    groups[getRandomInt(k)].push(vertex);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    for (let u of groups[i]) {\n      for (let k = 0; k < groups.length; k++) {\n        if (groups[k].includes(u)) continue;\n        let v = groups[k][getRandomInt(groups[k].length)];\n        add_edge(edges, u, v);\n      }\n      for (let k = 0; k < groups.length; k++) {\n        if (groups[k].includes(u)) continue;\n        for (let v of groups[k]) {\n          if (Math.random() <= p) add_edge(edges, u, v);\n        }\n      }\n    }\n  }\n  console.log(groups);\n  console.log(edges);\n  console.log(type);\n\n  let g = new Graph();\n  let solver = type === \"cbip\" ? new CBIPSolver(g) : new FirstFitSolver(g);\n\n  let alreadyAdded = new Set();\n  for (let u = 1; u <= n; u++) {\n    let edgesToAdd = [];\n    for (let i = 0; i < edges.length; i++) {\n      if (edges[i][0] === u || edges[i][1] === u) {\n        let v = edges[i][edges[i][0] === u ? 1 : 0];\n        if (alreadyAdded.has(v)) edgesToAdd.push(v);\n      }\n    }\n    alreadyAdded.add(u);\n    console.log(u, edgesToAdd);\n    solver.solve(u, edgesToAdd).print();\n  }\n  return solver;\n}\n\nexport default generator;\n","import \"./App.css\";\nimport React from 'react';\n\nimport Graph from \"react-graph-vis\";\nimport { useState } from \"react\";\nimport { Button, Form, Select, InputNumber, Switch } from \"antd\";\nimport generator from \"./generator\";\nlet tc = generator(5, 2);\nconst { Option } = Select;\n\nfunction App() {\n  const [graph, setGraph] = useState(JSON.parse(JSON.stringify(tc.visGraph)));\n  const [n, setN] = useState(5);\n  const [k, setK] = useState(2);\n  const [algo, setAlgo] = useState(\"cbip\");\n  const [cr, setCr] = useState((tc.maxColor * 1.0) / k);\n  const [physics, setPhysics] = useState(true);\n  const [p, setP] = useState(0.5);\n\n  const onFinish = () => {\n    // Implementation for generating new graph\n  };\n\n  const onPreviousClick = () => {\n    setGraph(JSON.parse(JSON.stringify(tc.pop())));\n  };\n\n  const onNextClick = () => {\n    setGraph(JSON.parse(JSON.stringify(tc.pushBack())));\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h5>Competitive Ratio = {cr}</h5>\n      </div>\n      <div className=\"Graph-Wrapper\">\n        <Graph\n          key={graph.noOfEdges}\n          graph={graph}\n          options={{\n            edges: {\n              color: \"#333333\",\n              width: 1,\n              arrows: {\n                to: { enabled: false }, // disable arrow at end of edge\n                middle: { enabled: false }, // disable arrow in the middle of edge\n                from: { enabled: false }, // disable arrow at start of edge\n              },\n            },\n\n            nodes: {\n              label: \"Node label\",\n              borderWidth: 2,\n              borderWidthSelected: 4,\n              font: {\n                size: 16,\n                color: \"#000000\",\n              },\n              color: {\n                border: \"#000000\",\n              },\n            },\n            interaction: {\n              hover: true,\n              navigationButtons: true,\n              zoomView: false,\n              dragView: false,\n            },\n            physics: {\n              enabled: physics,\n              barnesHut: {\n                gravitationalConstant: -2000,\n                centralGravity: 0.5,\n                springLength: 100,\n              },\n            },\n\n            height: \"500px\",\n          }}\n          // events={events}\n          getNetwork={(network) => {\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\n          }}\n        />\n      </div>\n      <div className=\"controller-bar\">\n        <Button\n          style={{ backgroundColor: \"#159895\", color: \"#fff\", margin: \"20px\" }}\n          disabled={tc.visGraph.nodes.length == 1}\n          onClick={onPreviousClick}\n        >\n          Previous\n        </Button>\n        <Button\n          style={{\n            backgroundColor: \"#159895\",\n            color: \"#fff\",\n            margin: \"20px\",\n          }}\n          disabled={!tc.visGraphHistory.nodes.length}\n          onClick={onNextClick}\n        >\n          Next\n        </Button>\n        Physics\n        <Switch\n          style={{ margin: \"10px\" }}\n          checkedChildren=\"On\"\n          unCheckedChildren=\"Off\"\n          defaultChecked\n          onChange={(e) => {\n            setPhysics(e);\n          }}\n        />\n      </div>\n      <div className=\"button-bar\">\n        <Form onFinish={onFinish} layout=\"inline\">\n          <Form.Item\n            label=\"Number of Vertices (N)\"\n            name=\"n\"\n            rules={[{ required: true, message: \"Please enter n.\" }]}\n          >\n            <InputNumber\n              min={1}\n              max={100}\n              defaultValue={5}\n              onChange={(e) => {\n                setN(e);\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Chromatic Number (K)\"\n            name=\"k\"\n            rules={[{ required: true, message: \"Please enter k.\" }]}\n          >\n            <InputNumber\n              min={2}\n              max={50}\n              defaultValue={2}\n              onChange={(e) => {\n                setK(e);\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"algorithm\"\n            label=\"Algorithm\"\n            rules={[{ required: true, message: \"Please select graph type.\" }]}\n          >\n            <Select\n              placeholder=\"Select Algorithm\"\n              defaultValue=\"CBIP\"\n              onChange={(e) => {\n                setAlgo(e);\n              }}\n            >\n              <Option value=\"firstfit\">First Fit</Option>\n              <Option value=\"cbip\">CBIP</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Probability of adding edge (p)\"\n            name=\"p\"\n            rules={[{ required: true, message: \"Please enter p.\" }]}\n          >\n            <InputNumber\n              min={0.01}\n              max={1}\n              step={0.01}\n              defaultValue={0.5}\n              onChange={(e) => {\n                setP(e);\n              }}\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                if (algo === \"cbip\" && k > 2) {\n                  alert(\"CBIP is only supported for k = 2.\");\n                  return;\n                }\n                if (n === null || k === null) {\n                  alert(\"Please enter N and K.\");\n                  return;\n                }\n                if (k > n) {\n                  alert(\"K can not be greater than N.\");\n                  return;\n                }\n                tc = generator(n, k, p, algo);\n                setGraph(JSON.parse(JSON.stringify(tc.visGraph)));\n                setCr((tc.maxColor * 1.0) / k);\n              }}\n            >\n              Solve for a Random Graph\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<HashRouter>\n    <Routes>\n        <Route path=\"/\" element={<App/>} />\n    </Routes>\n</HashRouter>);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}